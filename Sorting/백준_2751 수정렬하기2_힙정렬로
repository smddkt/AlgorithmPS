import sys

n = int(input())
arr=[]

for i in range(n):
    arr.append(int(sys.stdin.readline()))

#max heapify 함수: 특정 인덱스의 노드를 최대 힙 형태로 유지하는 함수

#heapify 알고리즘: 단 하나의 노드를 제외하고는 최대 힙이 구성되어 있는 상태라고 가정한다. 

def max_heapify(arr, n, i):
    largest = i #부모 노드의 인덱스가 i이면
    left = 2 * i + 1 # 왼쪽 자식 노드의 "인덱스"는 2*i+1
    right = 2 * i + 2 # 오른쪽 자식 노드의 "인덱스"는 2*i+2

    #이때 왼쪽 자식 노드의 '값'이 부모 노드의 '값'보다 크면 largest 값을 갱신한다. 
    if left < n and arr[largest] < arr[left]:
        largest = left

    #오른쪽 자식 노드가 부모 노드보다 커도 largest 값을 갱신한다. 
    if right < n and arr[largest] < arr[right]:
        largest = right

    #largest 값이 갱신되었다면 노드를 교환한다. (왼쪽자식과 부모노드 or 오른쪽 자식과 부모노드 중 한 번만 교환이 일어남.)
    if largest != i :
        arr[i], arr[largest] = arr[largest], arr[i]
        #재귀적으로 max_heapify를 호출한다. 
        max_heapify(arr, n, largest)
            





#힙 정렬 함수 : 최대힙 그래피에서 가장 꼭대기에 있는 수를 맨 마지막 칸으로 보내고, 히피파이해서 가장 높은 수 다시 맨 마지막으로 보내고 그렇게 해서 오름차순으로 정렬함. 

def heap_sort(arr):
    n = len(arr)

    for i in range((n//2-1), -1, -1):
        max_heapify(arr, n, i)
        
    #여기까지 하면 입력 배열이 최대 힙으로 만들어짐.

    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        max_heapify(arr, i, 0)
    #힙에서 최대 원소를 추출하고 맨 뒤로 이동. 위쪽에서 다시 히피파이 수행해서 힙 속성 유지
    
    return arr


arr= heap_sort(arr)

for j in arr:
    print(j)
