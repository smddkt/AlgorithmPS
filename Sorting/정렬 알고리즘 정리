"""
선택 정렬: 남아 있는 것들 중 가장 작은 것을 선택
---> 처리되지 않은 데이터 중 맨 앞에 있는 데이터와 바꾸기
"""

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
    min_index = i
    for j in range(i + 1, len(array)):
        if array[min_index]>array[j]:
            min_index = j
    array[i], array[min_index] = array[min_index], array[i]

print(array)

"""
선택정렬의 시간 복잡도: O(N^2) 
---> 다른 알고리즘에 비해 비효율적. but 최솟값, 최댓값 구할 때 좋음.
"""



"""
삽입 정렬: 데이터가 거의 정렬되어 있을 때 가장 효과적.
늘 오름차순(왼쪽으로 갈수록 작아짐)으로 정렬되어 있다. 삽입할 데이터(2번째부터 시작)를 한 칸 씩 왼 쪽으로 옮기면서,
삽입될 데이터보다 작은 데이터를 만나면 그 위치에서 멈추고 바로 뒤에 삽입하면 된다. 
"""
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1):
        if array[j] < array[j-1]:
            array[j], array[j-1] = array[j-1], array[j]
        else:
            break
print(array)

"""
삽입정렬의 시간 복잡도: O(N^2) 
---> 선택정렬과 비슷하지만 거의 정렬이 완성되어있는 상태라면 삽입 정렬이 훨씬 빠르다.
"""



"""
퀵 정렬: 기준(피벗) 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾼다. 
가장 많이 사용되고, 빠르다. 
"""

#1. 분할
#2. 왼쪽 리스트 분할
#3. 오른쪽 리스트 분할

array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array, start, end):
    if start >= end:
        return

    pivot = start
    left = start+1
    right = end
    
    while left <= right:
        while left <= end and array[left] <= array[pivot]:
            left += 1
        while right > start and array[right] >= array[pivot]:
            right -=1

        if left > right: 
            array[right], array[pivot] = array[pivot], array[right]
        else: 
            array[left], array[right] = array[right], array[left]

    quick_sort(array, start, right-1)       
    quick_sort(array, right+1, end)
    
quick_sort(array, 0, len(array)-1)
print(array)


#파이썬의 장점을 살린 퀵 정렬 구현 1

def qsort(array):
    """배열 arr을 오름차순으로 퀵 정렬한다."""
    if len(array) < 2:
        return array
    pivot = array[0]
    low = []
    high = []
    for value in array[1:]:
        if value < pivot:
            low.append(value)
        else:
            high.append(value)
#     print(f"{low} + {[pivot]} + {high}")
    return qsort(low) + [pivot] + qsort(high)

print(qsort(array))


#파이썬의 장점을 살린 퀵 정렬 구현 2

array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array):
    if len(array) <= 1:
        return array
    pivot = array[0]
    tail = array[1:] #피벗인 원소 빼고 다 들어가 있는 리스트

    left_side = [x for x in tail if x <= pivot]
    right_side = [x for x in tail if x > pivot]

    return quick_sort(left_side) + [pivot] + quick_sort(right_side)

print(quick_sort(array))


""" 
퀵 정렬의 시간 복잡도 = O(NlogN)
선택정렬, 삽입정렬에 비해 빠름. 데이터 개수가 많을 수록 압도적으로 빠름.
하지만 최악의 경우에는 시간 복잡도가 O(N^2)이다. 
특히 데이터가 이미 정렬되어 있는 경우에, 삽입 정렬과 반대로 매우매우 느려짐.
"""


"""
계수 정렬(count sort)
특정 조건이 부합할 때만 사용할 수 있음. (== 데이터의 범위가 제한되어 정수 형태로 표현할 수 있을 때.)
모든 범위를 담을 수 있는 크기의 배열을 먼저 선언해야 하기 때문이다. 대신 데이터의 개수가 많아도 빠르게 정렬됨.
"""

#모든 원소의 값이 0보다 크거나 같고 정수일 때
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

#모든 범위를 포함하는 리스트 선언하고, 각 원소의 값은 0으로  초기화
count = [0] * (max(array) + 1)

#각 데이터에 해당하는 인덱스의 값 증가
for i in range(len(array)):
    count[array[i]] += 1

for i in range(len(count)):
    for j in range(count[i]):
        print(i, end = ' ') #띄어쓰기를 구분으로, 원소가 등장한 횟수만큼 인덱스 출력


""" 계수 정렬의 시간 복잡도 = O(N+K)
앞에서부터 데이터 하나씩 확인 : N번 리스트에다가 숫자 입력, 추후에 리스트에서 각 인덱스 확인할 때 데이터 개수만큼(K번) 반복.
현존하는 정렬 알고리즘 중 (기수 정렬과 더불어) 가장 빠름.

공간 복잡도도 O(N+K)인데, 엄청 비효율적일 수 있다.
만약,, 데이터가 0, 9999999 단 두 개만 존재한다면? 엄청난 공간 낭비. 
"""



"""
파이썬의 정렬 라이브러리: sorted()함수.

sorted(array) 또는 array.sort()이렇게 씀. 후자는 key 매개변수를 임력값으로 받을 수 있다. 
예를 들면 리스트의 데이터가 튜플일 때. sorted(array, key=setting) 이렇게 쓸 수 있음. 

시간 복잡도는 최악의 경우에도 O(NlogN)이다. 
"""
