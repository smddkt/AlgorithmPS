"""
Dynamic Programming:
메모리 공간을 약간 더 사용해서 연산 속도를 비약적으로 증가시키는 방법이다.
피보나치 수열처럼, 연속된 많은 데이터를 처리할 때.. 
한 번 구한 결과를 메모리 공간(==리스트)에 메모해두고, 같은 식을 다시 호출할 때 그 결과를 가져다 쓴다.(메모이제이션 or 캐싱이라고 함.)

"""

#피보나치 함수 with 재귀함수: 수행시간이 기하급수적으로 늘어난다.

def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))


#피보나치 함수 with 재귀함수&메모이제이션: 
#재귀되더라도 메모리에 있는 걸 가져와서 쓸 수 있음. top-down방식으로 DP를 수행.

d=[0]*100

def fivo(x):
    if x ==1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = fivo(x-1) + fivo(x-2)
    return d[x]

print(fibo(99))


#피보나치 함수 with 단순 반복문
#밑에서 부터 시작돼서 재귀가 아예 안 일어나니까 더 좋음! bottom-up 방식으로 DP를 수행.

d = [0] * 100

d[1] = 1
d[2] = 1
n = 99

for i in range(3, n+1):
    d[i] = d[i-1] + d[i-2]

print(d[n])


'''
※주어진 문제가 다이나믹 프로그래밍 유형인지 어떻게 알까???????????
1. 완전 탐색 알고리즘으로 접근하면 너무 오래 걸릴 것 같을 때
2. 큰 문제를 작은 문제로 나눌 수 있을 때
3. 작은 문제에서 구한 정답이 큰 문제에서도 동일하게 적용될 떄
'''

