#이진탐색 후 딕셔너리로 풀기. 

import sys

n=int(input())
arr1=sorted(list(map(int, sys.stdin.readline().split())))


m=int(input())
arr2=list(map(int, sys.stdin.readline().split())) 

def binary_search(array, target, start, end):
    while start<=end:
        mid=(start+end)//2
        
        if target==array[mid]:
            return target
        elif target>array[mid]:
            start=mid+1
        else:
            end=mid-1
    return 0


numlist=[] 

for i in range(m):
        if binary_search(arr1, arr2[i], 0, n-1) !=0:
            numlist.append(binary_search(arr1, arr2[i], 0, n-1)) #이진탐색으로 arr1에 있는 원소로만 구성된 numlist를 만들기

counts={} #빈 딕셔너리


for i in numlist:
    counts[i]=0 #numlist에 있는 원소를 key 값으로 한 dictionary 요소를 추가하고 value는 모두 0으로 초기화함. 

for j in arr1:
    if j in counts: 
        counts[j]+=1  #기준 리스트인 arr1을 돌면서 dictionary에 있는 키 값이 나올 때마다 value에 1을 더함--> value 값이 원소의 개수와 같아짐.
    else:
        continue
    
#이렇게 len(arr1) 만큼 딱 한번만 반복하면 각 요소가 arr1에 몇 개 들어있는지 정리할 수 있음. 
# 계수정렬에서 빈 공간 만들고 1씩 더해가는 거랑 비슷하게 엄청 빠른 방법이다. 
# 원소 개수 구하려고 count(n) 인가 이렇게 하면 n개의 요소에 대해서 arr1을 다 돌아야 하니까 O(n*2)의 시간 복잡도. 
        

for i in arr2:
    if i in counts: 
        print(counts.get(i), end=' ') #count에 등록된 숫자는 그 개수(value)를 출력
    else: print(0, end=' ') #count에 없으면 0을 출력 
    
    #한 줄로 출력하는 형식을 맞추기 위해서 end=' ' 추가.