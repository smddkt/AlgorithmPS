#순차 탐색 구현

def sequential_search(n, target, array):
    for i in range(n):
        if array[i]==target:
            return i+1
        
#찾고자 하는 값이 리스트의 몇 번째에 있는지를 반환한다.  
        
n = 3
target='good'
array = ['hi', 'good', 'morning']

print((sequential_search(3, target, array)))

#순차 탐색의 시간 복잡도: O(N)




#이진 탐색의 시간복잡도는 O(logN)이다.

#이진 탐색의 구현 1.재귀 함수 이용하기

def binary_search(array, target, start, end):
    if start>end:
        return None
    mid = (start+end)//2
    
    if array[mid] == target:
        return mid
    elif array[mid] > target:
        return binary_search(array, target, start, mid-1)
    else:
        return binary_search(array, target, mid+1, end)
    
    
    
#이진 탐색의 구현 2. 반복문 이용하기

def binary_search(array, target, start, end):
    while start <=end:
        mid = (start + end) //2
        
        if array[mid] == target:
            return mid
        elif array[mid] > target:
            end = mid-1
        else: 
            start = mid+1
        return None
    
    

#이진탐색 수행 결과 출력

n=3
target='good'
array = ['hi', 'good', 'morning']

result= binary_search(array, target, 0, n-1)
if result == None:
    print("원소가 존재하지 않습니다.")
else:
    print(result+1)
    



'''이진탐색은 코딩테스트에서 단골로 나오는 문제이니 가급적 외우자. 
다른 알고리즘에서도 폭넓게 적용되는 원리기이도 하고, 다른 알고리즘과 함께 쓰이는 경우도 많다. 
코딩테스트에서 범위가 2000만을 넘어가면 이진탐색으로 접근하자. 
단위가 1000만 넘어가면, O(logN) 이상의 속도를 가진 알고리즘으로 풀어야 한다. 
'''